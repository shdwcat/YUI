id: equip_item
file_type: interaction
type: drag_and_drop

hit_test_source_position: true

// 'Interactions' are used to define complex UI behavior like Drag and Drop without writing code.
// The core logic exists in GML code, but we can define custom behavior and visuals in .yui files.
// The drag_and_drop interaction type defines two roles, 'drag' and 'drop'.
// UI elements can participate in one or more interactions/roles, as seen in inventory_screen.yui

drag:
  // The 'condition' property controls whether an element can currently participate in the role.
  // In this case, it determines if the user can begin dragging this element.
  condition: @is_equipped != true // NOTE - is_equipped isn't actually implemented yet...

  visual:
    // NOTE: import does not work in interactions yet :(
    type: panel
    layout: horizontal
    background: black // note that we can use the name of any built in GMS color
    border_color: white
    border_thickness: 1
    padding: 1
    elements:
      - type: image
        sprite: @source.data.sprite
        size: 64
      - type: text
        padding: 10
        text_style: subtitle
        text: @source.data.name
  
  // by default, the visual for the item being dragged is drawn centered on the cursor
  // but we can disable that here, so that it's position with the cursor at the top left
  center_visual: false

  // We can also define a function to be called at each frame
  // this might be useful if you wanted to track where the cursor was moved during the drag
  action: null

drop:
  // the 'drop' condition determines whether it is valid to 'drop' the item being dragged
  // onto the 'drop' element. For example, in this case, we only want to allow the drop
  // when the 'slot' value on the target (this element) matches the 'slot' on the item being
  // dragged. This prevents you from equipping boots to your head!
  // Note that we can use binding expressions more complex than just referring to a single value
  condition: @source.data.slot == @target.data.slot

  // You can also define a visual to be drawn *on top* of the drop element. This way you can
  // draw helpful indicators to guide users to valid drop targets, or indicate what action
  // will happen when the item is dropped!
  visual:
  
    // The switch element is useful when we want to render a different element depending on
    // some value of the data. In this case, we only want to draw the 'invalid' indicator when
    // the slots don't match. This could also be done using a binding on 'visible', but this
    // way we could also easily add an indicator to items where the slot does match!
    type: switch
    switch_on: @source.data.slot == @target.data.slot
    cases:
      false:
        type: image
        sprite: yui_panel_bg
        size: stretch
        blend_color: maroon
        opacity: 0.7

  // here we define the 'action' which is the script to execute when a valid drop occurs
  // and the parameters to pass to it
  // TODO: use assignment once implemented
  action: @@ yui_example_equip_item(@source.data /* the item */, @target.data /* the slot */)

// lastly, you can also define an action to take if the drop is cancelled
// (aka the dragged item is released over something which is not a drop target
// or is not a *valid* drop target)
on_cancel: @@ yui_log(`interaction 'equip_item' was cancelled`)