file_type: resources

resources:
  // selectable_text:
  //   type: template
  //   slots:
  //     is_selected: false
  //   template:
  //       type: text
  //       text_style: $is_selected then subtitle else body

  // default template for displaying the item value
  dropdown_item_template:
    type: text
    text: @
    color: $foreground

  dropdown_menu:
    type: template
    
    slots:
      // the selection scope that manages selection state
      selection_scope: null // type: YuiSelectionScope

      selected_item: null

      // array of items to select from
      items: []

      can_clear_value: true

      // template to use when rendering items in dropdown
      item_template: &dropdown_item_template

      item_background: null

      // additional handler executed after item is selected
      on_item_selected: null 

      // where to place the dropdown
      dropdown_placement: bottom_left

      foreground: null

      arrow_icon: yui_down_arrow_64
      arrow_icon_frame: 0
      arrow_icon_size: 20

    events:
      item_selected:
        // select the item
        - item => $selection_scope then $selection_scope.select(item) else false
        // invoke the user handler
        - item => $on_item_selected(item)

    template:
      type: button
      id: dropdown_button
      padding: 2
      content:
        type: panel
        layout: horizontal
        spacing: 0
        padding: 2
        elements:
          // current item text
          - type: border
            padding: [5, 0, 5, 0]
            data_source: $selected_item ?? $selection_scope.selected_item
            content: $item_template

          - type: button
            content:
              type: text // TODO X sprite
              color: $theme.resources.negative_color
              text: X
            padding: [5, 0]
            background: #00000000
            border_thickness: 0
            visible: $can_clear_value and ($selected_item != undefined or $selection_scope.selected_index >= 0)
            on_click: @@ e => yui_invoke_event(e.source, item_selected, undefined)

          // down arrow (to indicate this is a dropdown)
          - type: image
            blend_color: $theme.resources.accent_color
            size: $arrow_icon_size
            sprite: $arrow_icon
            frame: $arrow_icon_frame

      popup:
        placement: $dropdown_placement
        content:
          type: panel
          spacing: 0
          alignment: { h: stretch }
          elements: $items
          template:
            type: button
            border_thickness: 0
            padding: 5
            background: $item_background
            content: $item_template
            on_click:
              // invoke the item_selected event on the root widget
              - @@ e => yui_invoke_event(e.source, item_selected, @)
              // close the popup
              - @@ e => e.source.closePopup()